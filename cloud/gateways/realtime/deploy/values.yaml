replicaCount: 1

image:
  repository: 104472814609.dkr.ecr.us-east-2.amazonaws.com/realtime
  pullPolicy: IfNotPresent
  tag: "latest"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

podAnnotations: {}

podSecurityContext: {}

securityContext:
  capabilities:
    drop:
      - NET_RAW
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  port: 80
  internalPort: 8080

ingress:
  enabled: true
  istio: false
  className: "nginx"
  hosts:
    - host: api.${INGRESS_DOMAIN}
      paths:
        - path: /realtime
          pathType: ImplementationSpecific

livenessProbe:
  httpGet:
    path: /realtime/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 30
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /realtime/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 15
  successThreshold: 3

resources:
  requests:
    cpu: 1000m
    memory: 128Mi
  limits:
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

app:
  config:
    ENVIRONMENT: "prod"
    LOGURU_LEVEL: "INFO"
    GUNICORN_WORKERS: "1"
    SENTRY_DSN: ""
    SENTRY_TRACE_SAMPLE_RATE: "0.01"
    SENTRY_PROFILES_SAMPLE_RATE: "0.01"
    SIBEL_VERSION: "0.0.1"
    APPLICATION_PORT: "8080"
    BASE_PATH: "/realtime"
    BROKER_TOPIC_VITALS: "vitals"
    BROKER_TOPIC_ALERTS: "alerts"
    BROKER_TOPIC_SDC_REALTIME_STATE: "sdc-realtime-state"
    BROKER_TOPIC_PATIENTS: "events-patient"
    BROKER_TOPIC_DEVICES: "events-device"
    BROKER_TOPIC_SDC_EVENTS: "events-sdc"
    KAFKA_CA_FILE_PATH: /kafka-cluster-certs/ca.crt
    KAFKA_CERT_FILE_PATH: /kafka-user-certs/user.crt
    KAFKA_KEY_FILE_PATH: /kafka-user-certs/user.key
    KAFKA_HOST: "kafka-cluster-kafka-bootstrap"
    KAFKA_PORT: "9093"
    KAFKA_HEALTHCHECK_TOPIC: "healthcheck"
    WEB_BASE_URL: "https://api.${INGRESS_DOMAIN}/web"
    CORS_ORIGINS: "https://cms.${INGRESS_DOMAIN},http://localhost:3000"
  extraEnvs:
    - name: KAFKA_PASSWORD
      valueFrom:
        secretKeyRef:
          name: kafka-user
          key: user.password
    - name: JWT_VERIFYING_KEY
      valueFrom:
        configMapKeyRef:
          name: rsa-public-key
          key: PUBLIC_RS256_KEY
