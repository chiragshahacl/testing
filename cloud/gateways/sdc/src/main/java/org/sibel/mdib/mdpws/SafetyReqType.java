//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0.1
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2024.05.09 at 01:02:24 PM UTC
//

package org.sibel.mdib.mdpws;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.*;
import javax.xml.namespace.QName;
import org.w3c.dom.Element;

/**
 * Indicates that data is required that preserve patient safety during transmission.
 *
 * <p>Java class for SafetyReqType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="SafetyReqType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="DualChannelDef" type="{http://standards.ieee.org/downloads/11073/11073-20702-2016}DualChannelDefType" minOccurs="0"/&gt;
 *         &lt;element name="SafetyContextDef" type="{http://standards.ieee.org/downloads/11073/11073-20702-2016}SafetyContextDefType" minOccurs="0"/&gt;
 *         &lt;any processContents='skip' namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute processContents='skip' namespace='##other'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 *
 *
 */
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
        name = "SafetyReqType",
        propOrder = {"dualChannelDef", "safetyContextDef", "any"})
public class SafetyReqType {

    @XmlElement(name = "DualChannelDef")
    protected DualChannelDefType dualChannelDef;

    @XmlElement(name = "SafetyContextDef")
    protected SafetyContextDefType safetyContextDef;

    @XmlAnyElement
    protected List<Element> any;

    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the dualChannelDef property.
     *
     * @return
     *     possible object is
     *     {@link DualChannelDefType }
     *
     */
    public DualChannelDefType getDualChannelDef() {
        return dualChannelDef;
    }

    /**
     * Sets the value of the dualChannelDef property.
     *
     * @param value
     *     allowed object is
     *     {@link DualChannelDefType }
     *
     */
    public void setDualChannelDef(DualChannelDefType value) {
        this.dualChannelDef = value;
    }

    /**
     * Gets the value of the safetyContextDef property.
     *
     * @return
     *     possible object is
     *     {@link SafetyContextDefType }
     *
     */
    public SafetyContextDefType getSafetyContextDef() {
        return safetyContextDef;
    }

    /**
     * Sets the value of the safetyContextDef property.
     *
     * @param value
     *     allowed object is
     *     {@link SafetyContextDefType }
     *
     */
    public void setSafetyContextDef(SafetyContextDefType value) {
        this.safetyContextDef = value;
    }

    /**
     * Gets the value of the any property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Element }
     *
     *
     */
    public List<Element> getAny() {
        if (any == null) {
            any = new ArrayList<Element>();
        }
        return this.any;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     *
     * <p>
     * the map is keyed by the name of the attribute and
     * the value is the string value of the attribute.
     *
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     *
     *
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }
}
