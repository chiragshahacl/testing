{{- $secretName := "django-secret" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels:
    {{- include "deploy.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $djangoSecret to existing secret data or generate a random one when not exists
  {{- $djangoSecret := (get $secretData "django-secret") | default (randAlphaNum 64 | b64enc) }}
  DJANGO_SECRET_KEY: {{ $djangoSecret | quote }}