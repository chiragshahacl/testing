
[tool.poetry]
name = "emulator"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
httpx = "^0.23.0"
loguru = "^0.7.0"
aiokafka = "^0.8.0"
scipy = "^1.10.1"
pooch = "^1.7.0"
fastapi = "^0.95.1"
gunicorn = "^20.1.0"
uvicorn = "^0.22.0"
faker = "18.9.0"
orjson = "^3.9.1"
more-itertools = "^9.1.0"
python-dotenv = "^1.0.0"
cryptography = "^43.0.1"
hl7 = "^0.4.5"

[tool.poetry.group.dev.dependencies]
pytest-mock = "^3.10.0"
behave = "^1.2.6"
pytest = "^7.1.3"
respx = "^0.20.0"
coverage = "^7.2.2"
pylint = "^2.15.4"
reformat-gherkin = "^3.0.1"
exceptiongroup = "^1.0.0-rc.9"
isort = "^5.10.1"
flake8 = "^6.0.0"
flake8-simplify = "^0.19.3"
flake8-comprehensions = "^3.10.0"
pytest-asyncio = "^0.21.0"
freezegun = "^1.2.2"
ipdb = "^0.13.11"
polyfactory = "^2.9.0"
ruff = "^0.5.0"


[tool.coverage.run]
omit = ["src/settings.py"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
src = ["src", "tests"]
lint.ignore = ["F722"]
lint.select = [
    "C4",  # flake8-comprehensions
    "E",   # pycodestyle
    "ERA", # eradicate (removes commented out code)
    "F",   # pyflakes
    "I",   # isort
    "PLC", # pylint
    "SIM", # flake8-simplify
    "TID", # tidy-imports
    "W",   # warnings
]

[tool.pylint.main]
fail-under = 10
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.11"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["'builtins.Exception", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]


[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
extension-pkg-whitelist = "pydantic"
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "missing-module-docstring",
    "too-few-public-methods",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-many-arguments",
    "fixme",
]
enable = ["c-extension-no-member"]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 4
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]


[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
